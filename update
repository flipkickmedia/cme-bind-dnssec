#!/usr/bin/env bash
# update.sh
# updates a DS key on the parent domain based on the CDS key being published.
# you can set env variables or pass parameters to this command
# DOMAIN=example.com
# KEY_ID=12345
# VIEW=externals-master
# $ update ${domain} ${key_id} ${view}

if [[ $# -lt 4 ]]; then
  echo "cme-dnssec-monitor/clean v0.1.0 - removes DS keys from BIND"
  echo "  usage: $ clean ${ip_addr} ${ns_server} ${domain} ${ttl} ${view}"
  exit 1
fi

DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"

if [[ ${CME_DNSSEC_MONITOR_DEBUG:-notloaded} == "notloaded" || ${CME_DNSSEC_MONITOR_DEBUG:-notloaded} -eq 0 ]]; then
  # shellcheck disable=SC1091
  . "/etc/cme/dnssec-monitor.env"
fi

if [[ -f "${DIR}/lib.sh" ]]; then
  echo "loading lib"
  # shellcheck disable=SC1091
  . "${DIR}/lib.sh"
fi

declare domain=${DOMAIN:-$1}
declare key_id=${KEY_ID:-$2}
declare view=${VIEW:-$3}
declare dsprocess_path=${DSPROCESS_PATH:-$4}
declare domain_parent
declare ttl=${TTL:$-60}

key_id=$(printf "%05d" "${key_id}")
domain_parent=$(parent_domain "${domain}")

# shellcheck disable=SC2068
view_var="${view^^}"
view_var="${view_var//-/_}"
iface_var=${view_var}_IFACE
ip_addr="${!iface_var}"
declare -n ns_server_var="${view_var}_NS_SERVER"
ns_server="${ns_server_var}"

key_var=${view_var}_KEY_NAME
key_name="${!key_var}"
key_name_var="${key_name^^}"
key_name_var="${key_name_var//-/_}"
key_file="${CONF_PATH}/rndc.${view}.key"

log "handling CDS publish"
log "ns_server............... : ${ns_server}"
log "view ................... : ${view}"
log "domain ................. : ${domain}"
log "key_id ................. : ${key_id}"
log "key_var ................ : ${!key_var}"
log "ip_addr ................ : ${ip_addr}"
log "key_name ............... : ${key_name}"
log "key_file ................: ${key_file}"
log "ttl .................... : ${ttl}"

if [[ ! -f "${CONF_PATH}/rndc.${view}.key" ]]; then
  log "rndc key file not found at ${CONF_PATH}/rndc.${view}.key! Aborting"
  exit 0
fi

if [[ ! -f "${KEY_PATH}/${view}/K${domain}.+014+${key_id}.key" ]]; then
  log "key file ${KEY_PATH}/${view}/K${domain}.+014+${key_id}.key NOT found! Aborting."
  exit 0
fi

if [[ ! -d "${dsprocess_path}/${view}" ]]; then
  mkdir "${dsprocess_path}/${view}"
  chmod 770
  touch "${dsprocess_path}/${view}/dsset-${view}-${domain}."
  touch "${dsprocess_path}/${view}/file-${view}-${domain}"
  touch "${dsprocess_path}/${view}/nsup.${domain}"
fi

log "removing old nsup"
rm "${dsprocess_path}/${view}/nsup.${domain}"
mkdir -p "${dsprocess_path}/${view}"
if [[ ! -f "${dsprocess_path}/${view}/dsset-${domain}." ]]; then
  echo digging ns_server_var$:ns_server_var
  dig -b "${ip_addr}" "@${ns_server}" +norecurse "${domain}". DNSKEY | dnssec-dsfromkey -a SHA-384 -f - "${domain}" | tee "${dsprocess_path}/${view}/dsset-${domain}." >/dev/null
fi
dig -b "${ip_addr}" "@${ns_server}" +dnssec +noall +answer "${domain}" DNSKEY "${domain}" CDNSKEY "${domain}" CDS | tee "${dsprocess_path}/${view}/file-${domain}" >/dev/null

log "$(dnssec-cds -a SHA-384 -s-86400 -T "${ttl}" -u -i -f "${dsprocess_path}/${view}/file-${domain}" -d "${dsprocess_path}/${view}" -i"orig" "${domain}" | tee "${dsprocess_path}/${view}/nsup.${domain}" >/dev/null)"

echo ${dsprocess_path}/${view}/file-${domain}
cat ${dsprocess_path}/${view}/file-${domain}

echo ${dsprocess_path}/${view}/nsup.${domain}
cat ${dsprocess_path}/${view}/nsup.${domain}

log "thawing ${domain_parent} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" thaw ${domain_parent} in ${view}

log "$(
  cat <<EOF
nsupdate -k "${CONF_PATH}/rndc.${view}.key" <<EOFT
server ${ns_server}
zone ${domain_parent}.
$(cat ${dsprocess_path}/${view}/nsup.${domain})
send
quit
)
EOF
)"

nsupdate -k "${CONF_PATH}/rndc.${view}.key" <<EOFT
server ${ns_server}
zone ${domain_parent}.
$(cat ${dsprocess_path}/${view}/nsup.${domain})
send
quit
EOFT

log "freezing ${domain_parent} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" freeze ${domain_parent} in ${view}
log "syncing ${domain_parent} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" sync -clean ${domain_parent} in ${view}
log "thawing ${domain_parent} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" thaw ${domain_parent} in ${view}

log "freezing ${domain} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" freeze ${domain} in ${view}
log "syncing ${domain} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" sync -clean ${domain} in ${view}
log "thawing ${domain} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" thaw ${domain} in ${view}

log "notifying ${domain_parent} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" notify ${domain_parent} in ${view}
log "notifying ${DOMAIN} in ${view}"
rndc -k "${CONF_PATH}/rndc.${view}.key" -c "${CONF_PATH}/rndc.${view}.conf" notify ${DOMAIN} in ${view}
